

library(shiny)
library(visNetwork)
library(igraph)
library(reshape2)
library(lubridate)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(DT)
library(stringr)
library(CooRnet)
#library(googledrive)


#runGitHub( "coord_net_dashboard", "lrossi79")




data <-  readRDS("data/dk_output.rds")
g <- data[[1]]
V(g)$color <- "gray"
top_url <- data[[2]]
top_url_tab <- top_url
top_url$account.name <- strsplit(top_url$account.names,",")
top_url <- unnest(data = top_url,cols = account.name)
top_url$account.name <- str_trim(top_url$account.name)


net <- list(timestamp=E(g)$t_coord_share)
names(net) <- as.data.frame(as.character(E(g)))
net <- melt(net,)
net <- net[c(2,1)]
names(net) <- c("eid","time")
net$time <- as_datetime(net$time)

t <- net
t$time <- as.Date(t$time)
t <- t %>% dplyr::group_by(time) %>%
    dplyr::summarize(GroupCount = n())


# Define UI for application that draws a histogram
ui <- fluidPage(theme = "bootstrap.css",
                 titlePanel("Network of coordinated behaviour"),
                 sidebarLayout(
                     sidebarPanel(
                         img(src='logo-coornet.png', align = "left", width="70%"),
                         dateRangeInput("daterange4", "",
                                        start = min(net$time),
                                        end = max(net$time)
                                        ),
                             
                          sliderInput("degree",
                                      "Min Degree:",
                                      min = 1,
                                      max = max(degree(g)),
                                      value = 0),
                         #selectInput("component",
                         #            "Select Component:",
                         #            choices = c("All",unique(V(g)$component)),
                         #            selected = "All",
                         #            multiple = F),
                         selectInput('news', 
                                     'Select News',
                                     choices = c("All", unique(top_url$expanded)),
                                     selected = "All",
                                     selectize=FALSE)
                         
                         ),
                     
                     mainPanel(
                         
                         tabsetPanel(type = "tabs",
                                     tabPanel("Details", DT::dataTableOutput("details")),
                                     tabPanel( "Network",visNetworkOutput("network",height = "800")),
                                     tabPanel("Timeline", plotOutput(outputId = "barplot"))
                                     
                         )
                         
                     )
                 ))

# Define server logic required to draw a histogram
server <- function(input, output) {
    
    
    g2 = reactive({
        selected <- top_url$account.name[top_url$expanded == input$news]
        net2 <- subset(net, time >= as.character(input$daterange4[1]) & time <= as.character(input$daterange4[2]))
        g3 <- subgraph.edges(g,eids = net2$eid,delete.vertices = T)
        #if(input$component=="All"){induced_subgraph(graph = g3,vids = V(g3)[V(g3)$degree >= input$degree])}
        #else if(input$component!="All"){induced_subgraph(graph = g3,vids = V(g3)[V(g3)$degree >= input$degree & V(g3)$component == input$component ])}
        if(input$news == "All"){induced_subgraph(graph = g3,vids = V(g3)[V(g3)$degree >= input$degree])}
        else if(input$news != "All"){
            V(g3)[V(g3)$account.name %in% selected]$color <- "red"
            induced_subgraph(graph = g3,vids = V(g3)[V(g3)$degree >= input$degree])}
        
        
    })
    
    
    t3= reactive({
        t2 <- subset(t,time >= as.character(input$daterange4[1]) & time <= as.character(input$daterange4[2]))
    })
    

    
    
    
    output$network <- renderVisNetwork({
        
        nodes <- data.frame(id=V(g2())$name, 
                            label=V(g2())$account.name, 
                            color=V(g2())$color, 
                            component=V(g2())$component, 
                            title=paste0("subscribers=", V(g2())$avg.account.subscriberCount, " - verified=",verified=V(g2())$account.verified))
        
        edges <- as.data.frame(as_edgelist(g2()))
        edges$weight <- E(g2())$weight
        colnames(edges) <- c("from", "to", "width")
        
        visNetwork(nodes, edges) %>%
            visOptions(highlightNearest = TRUE, selectedBy = "component") %>%
            visIgraphLayout()
    })
    
    
    output$barplot <- renderPlot({ggplot(t3(),mapping = (aes(x = time,y = GroupCount)))+geom_line()+theme_light()})
    
   
    output$details <- DT::renderDataTable({
        DT::datatable(top_url_tab, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
        #top_url_tab
        })
    
    
}

# Run the application 
shinyApp(ui = ui, server = server)
